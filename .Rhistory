metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df
# Liste des colonnes contenant des métadonnées téléchargées (ajoutez les autres au besoin)
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE",
"Assembly Method", "Sequencing Technology", "Location/Qualifiers",
"genotype", "organism", "mol_type", "isolation_source", "host",
"country", "note")
# Boucle pour supprimer les préfixes suivi d'espaces dans toutes les colonnes pertinentes
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
# Afficher le dataframe avec les métadonnées modifiées
metadata_df
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
# Liste des colonnes contenant des métadonnées téléchargées (ajoutez les autres au besoin)
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE",
"Assembly Method", "Sequencing Technology", "Location/Qualifiers",
"genotype", "organism", "mol_type", "isolation_source", "host",
"country", "note")
# Supprimer ':: ' des modalités dans la colonne Assembly_Method de metadata_df
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
# Afficher les données mises à jour
print(metadata_df)
# Boucle pour supprimer les préfixes suivi d'espaces dans toutes les colonnes pertinentes
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
# Afficher le dataframe avec les métadonnées modifiées
metadata_df
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
View(metadata_df)
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers",)
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers",)
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?) \n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESS = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESS = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df[, -2]
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df[, -2])
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESSION_NB = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df
colonnes_metas <- c("ACCESSION_NB", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
colonnes_metas <- c("ACCESSION_NB", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
colonnes_metas <- c("ACCESSION_NB", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
metadata_df[,"ACCESSION_NB"] <- sub('ACCESSION   ', '', metadata_df[,"ACCESSION_NB"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
colonnes_metas <- c("ACCESSION_NB", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
metadata_df[,"ACCESSION_NB"] <- sub('ACCESSION   ', '', metadata_df[,"ACCESSION_NB"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 10)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
# Créer un dataframe avec les métadonnées
metadata_df <- data.frame(ID = ids, Metadata = unlist(metadata_list))
# Extraire les métadonnées spécifiques
metadata_df <- metadata_df %>%
mutate(
ACCESSION = str_extract(Metadata, "ACCESSION\\s+(.*?)\n"),
SOURCE = str_extract(Metadata, "SOURCE\\s+(.*?)\n"),
ORGANISM = str_extract(Metadata, "ORGANISM\\s+(.*?)\n"),
AUTHORS = str_extract(Metadata, "AUTHORS\\s+(.*?)\n"),
TITLE = str_extract(Metadata, "TITLE\\s+(.*?)\n"),
'Assembly Method' = str_extract(Metadata, "Assembly Method\\s+(.*?)\n"),
"Sequencing Technology" = str_extract(Metadata, "Sequencing Technology\\s+(.*?)\n"),
"Location/Qualifiers" = str_extract(Metadata, "Location/Qualifiers\\s+(.*?)\n"),
genotype = str_extract(Metadata, "genotype\\s+(.*?)\n"),
organism = str_extract(Metadata, "organism=\"(.*?)\""),
mol_type = str_extract(Metadata, "mol_type=\"(.*?)\""),
isolation_source = str_extract(Metadata, "isolation_source=\"(.*?)\""),
host = str_extract(Metadata, "host=\"(.*?)\""),
country = str_extract(Metadata, "country=\"(.*?)\""),
note = str_extract(Metadata, "note=\"(.*?)\"")
)
# Supprimer la colonne "Metadata" qui n'est plus nécessaire
metadata_df <- metadata_df[, -2]
# Afficher le dataframe avec les métadonnées
metadata_df
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source          ', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
library(rentrez)
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
entrez_search <- entrez_search(db = "nucleotide", term = search_term)
ids <- entrez_search$ids
entrez_fetch_fasta <- entrez_fetch(db = "nucleotide", id = ids, rettype = "fasta", retmode = "text")
writeLines(entrez_fetch_fasta, "HEV_CompleteGenomes.fasta")
library(rentrez)
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
entrez_search <- entrez_search(db = "nucleotide", term = search_term)
ids <- entrez_search$ids
entrez_fetch_fasta <- entrez_fetch(db = "nucleotide", id = ids, rettype = "fasta", retmode = "text")
writeLines(entrez_fetch_fasta, "HEV_CompleteGenomes.fasta")
library(rentrez)
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
entrez_search <- entrez_search(db = "nucleotide", term = search_term, retmax = 1115)
ids <- entrez_search$ids
entrez_fetch_fasta <- entrez_fetch(db = "nucleotide", id = ids, rettype = "fasta", retmode = "text")
library(rentrez)
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
entrez_search <- entrez_search(db = "nucleotide", term = search_term, retmax = 1114)
ids <- entrez_search$ids
entrez_fetch_fasta <- entrez_fetch(db = "nucleotide", id = ids, rettype = "fasta", retmode = "text")
library(rentrez)
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
entrez_search <- entrez_search(db = "nucleotide", term = search_term, retmax = 6)
# Utilisation de l'historique web pour récupérer les résultats par lots
web_history <- entrez_search$web_history
# Définir la taille du lot (batch) que vous souhaitez récupérer à chaque itération
batch_size <- 100
# Créer un vecteur pour stocker les résultats complets
results <- character(0)
# Parcourir les résultats par lots
for (start in seq(1, entrez_search$count, by = batch_size)) {
end <- min(start + batch_size - 1, entrez_search$count)
# Récupérer les résultats pour ce lot
entrez_fetch_fasta <- entrez_fetch(
db = "nucleotide",
web_history = web_history,
retstart = start,
retmax = batch_size,
rettype = "fasta",
retmode = "text"
)
# Ajouter les résultats de ce lot au vecteur
results <- c(results, entrez_fetch_fasta)
}
library(rentrez)
library(dplyr)
library(stringr)
# Définir le terme de recherche
search_term <- '"Hepatitis E virus" [Organism] AND "complete genome"[Title]'
# Rechercher les IDs des séquences HEV correspondantes
search_results <- entrez_search(db = "nucleotide", term = search_term, retmax = 1114)
ids <- search_results$ids
# Initialiser une liste pour stocker les métadonnées
metadata_list <- list()
# Parcourir les IDs et récupérer les métadonnées
for (id in ids) {
entrez_record <- entrez_fetch(db = "nucleotide", id = id, rettype = "gb")
metadata_list[[id]] <- entrez_record
}
colonnes_metas <- c("ACCESSION", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
metadata_df[,'Assembly Method'] <- sub(':: ', '', metadata_df[,'Assembly Method'])
metadata_df[,"Sequencing Technology"] <- sub(':: ', '', metadata_df[,"Sequencing Technology"])
metadata_df[,"Location/Qualifiers"] <- sub('source', '', metadata_df[,"Location/Qualifiers"])
columns_to_process <- c("genotype", "organism", "mol_type", "isolation_source", "host", "country", "note")
for (col in columns_to_process) {
metadata_df[[col]] <- sub(paste0(col, '='), '', metadata_df[[col]])
}
print(metadata_df)
write.csv2(metadata_df, "HEV_Metadonnees.csv", row.names = FALSE)
colonnes_metas <- c("ACCESSION  ", "SOURCE", "ORGANISM", "AUTHORS", "TITLE", "Assembly Method", "Sequencing Technology", "Location/Qualifiers")
for (colonne in colonnes_metas) {
metadata_df[[colonne]] <- sub(paste0("^", colonne, "\\s+"), "", metadata_df[[colonne]])
}
